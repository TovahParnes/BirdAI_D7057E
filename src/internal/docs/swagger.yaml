basePath: /
definitions:
  models.AIBird:
    properties:
      accuracy:
        type: number
      name:
        type: string
    type: object
  models.AdminInput:
    properties:
      _id:
        type: string
      access:
        type: string
      userId:
        type: string
    type: object
  models.AdminOutput:
    properties:
      _id:
        type: string
      access:
        type: string
      user:
        $ref: '#/definitions/models.UserOutput'
    type: object
  models.AnalyzeResponse:
    properties:
      aiBird:
        $ref: '#/definitions/models.AIBird'
      birdId:
        type: string
      userMedia:
        $ref: '#/definitions/models.MediaOutput'
    type: object
  models.BirdInput:
    properties:
      description:
        type: string
      id:
        type: string
      imageId:
        type: string
      name:
        type: string
      soundId:
        type: string
    type: object
  models.BirdOutput:
    properties:
      description:
        type: string
      id:
        type: string
      image:
        $ref: '#/definitions/models.MediaOutput'
      name:
        type: string
      sound:
        $ref: '#/definitions/models.MediaOutput'
    type: object
  models.Err:
    properties:
      description:
        description: the error description for the developer, aka err.Error()
        type: string
      message:
        description: the displayed error text for the user
        type: string
      name:
        type: string
      status:
        type: integer
    type: object
  models.MediaInput:
    properties:
      data:
        type: string
      fileType:
        type: string
    type: object
  models.MediaOutput:
    properties:
      _id:
        type: string
      data:
        type: string
      fileType:
        type: string
    type: object
  models.PostDB:
    properties:
      accuracy:
        type: number
      birdId:
        type: string
      comment:
        type: string
      createdAt:
        type: string
      id:
        type: string
      location:
        type: string
      mediaId:
        type: string
      userId:
        type: string
    type: object
  models.PostInput:
    properties:
      _id:
        type: string
      accuracy:
        type: number
      birdId:
        type: string
      comment:
        type: string
      location:
        type: string
      media:
        $ref: '#/definitions/models.MediaInput'
    type: object
  models.PostOutput:
    properties:
      _id:
        type: string
      accuracy:
        type: number
      bird:
        $ref: '#/definitions/models.BirdOutput'
      comment:
        type: string
      createdAt:
        type: string
      location:
        type: string
      user:
        $ref: '#/definitions/models.UserOutput'
      userMedia:
        $ref: '#/definitions/models.MediaOutput'
    type: object
  models.Response:
    properties:
      data: {}
      timestamp:
        type: string
    type: object
  models.UserDB:
    properties:
      _id:
        type: string
      active:
        type: boolean
      authId:
        type: string
      createdAt:
        type: string
      username:
        type: string
    type: object
  models.UserInput:
    properties:
      active:
        type: boolean
      id:
        type: string
      user:
        type: string
    type: object
  models.UserLogin:
    properties:
      authId:
        type: string
      username:
        type: string
    type: object
  models.UserOutput:
    properties:
      _id:
        type: string
      active:
        type: boolean
      createdAt:
        type: string
      username:
        type: string
    type: object
host: 127.0.0.1:3000
info:
  contact:
    email: ??
    name: Tovah Parnes
  description: A server for BirdAI API, for managing users, admin, birds, posts and
    more.
  license:
    name: MIT License
    url: https://opensource.org/license/mit/
  termsOfService: http://swagger.io/terms/
  title: BirdAI API
  version: "2.0"
paths:
  /api/v1/admins:
    post:
      consumes:
      - application/json
      description: Create a new admin
      parameters:
      - description: admin
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/models.AdminInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "403":
          description: Forbidden
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "503":
          description: Service Unavailable
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
      security:
      - Bearer: []
      summary: Create a new admin
      tags:
      - Admins
  /api/v1/admins/{id}:
    delete:
      consumes:
      - application/json
      description: Delete given admin
      parameters:
      - description: Admin ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "403":
          description: Forbidden
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "503":
          description: Service Unavailable
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
      security:
      - Bearer: []
      summary: Delete given admin
      tags:
      - Admins
    get:
      consumes:
      - application/json
      description: Get admin by ID
      parameters:
      - description: Admin ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.AdminOutput'
              type: object
        "403":
          description: Forbidden
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "410":
          description: Gone
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "503":
          description: Service Unavailable
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
      security:
      - Bearer: []
      summary: Get admin by ID
      tags:
      - Admins
    patch:
      consumes:
      - application/json
      description: Update given admin
      parameters:
      - description: admin ID
        in: path
        name: id
        required: true
        type: string
      - description: admin
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/models.AdminInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "403":
          description: Forbidden
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "503":
          description: Service Unavailable
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
      security:
      - Bearer: []
      summary: Update given admin
      tags:
      - Admins
  /api/v1/admins/list:
    get:
      consumes:
      - application/json
      description: List all admins of a specified set
      parameters:
      - description: Set of admins
        in: query
        name: set
        type: integer
      - description: Search parameter for admin
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.AdminOutput'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "403":
          description: Forbidden
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "503":
          description: Service Unavailable
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
      security:
      - Bearer: []
      summary: List all admins of a specified set
      tags:
      - Admins
  /api/v1/admins/me:
    get:
      consumes:
      - application/json
      description: Get current admin
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.AdminOutput'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "403":
          description: Forbidden
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "410":
          description: Gone
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "503":
          description: Service Unavailable
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
      security:
      - Bearer: []
      summary: Get current admin
      tags:
      - Admins
    post:
      consumes:
      - application/json
      description: TEMP Create a new admin based on the current user. Does not have
        any access schecks. This only exists for testing.
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "403":
          description: Forbidden
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "503":
          description: Service Unavailable
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
      security:
      - Bearer: []
      summary: TEMP Create a new admin based on the current user
      tags:
      - Admins
  /api/v1/ai/inputimage:
    post:
      consumes:
      - application/json
      description: Send in an image to get a response of which type of bird it is
      parameters:
      - description: picture
        in: body
        name: set
        required: true
        schema:
          $ref: '#/definitions/models.MediaInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.AnalyzeResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Err'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Err'
                  type: array
              type: object
        "503":
          description: Service Unavailable
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Err'
                  type: array
              type: object
      security:
      - Bearer: []
      summary: Analyze image
      tags:
      - AI
  /api/v1/birds/{id}:
    get:
      consumes:
      - application/json
      description: Get bird by ID
      parameters:
      - description: Bird ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.BirdOutput'
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "410":
          description: Gone
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "503":
          description: Service Unavailable
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
      summary: Get bird by ID
      tags:
      - Birds
    patch:
      consumes:
      - application/json
      description: Update given bird
      parameters:
      - description: Bird ID
        in: path
        name: id
        required: true
        type: string
      - description: bird
        in: body
        name: bird
        required: true
        schema:
          $ref: '#/definitions/models.BirdInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "403":
          description: Forbidden
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "503":
          description: Service Unavailable
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
      security:
      - Bearer: []
      summary: Update given bird
      tags:
      - Birds
  /api/v1/birds/list:
    get:
      consumes:
      - application/json
      description: List all birds of a specified set and seach parameters
      parameters:
      - description: Set of birds
        in: query
        name: set
        type: integer
      - description: Search parameter for birds
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.BirdOutput'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "503":
          description: Service Unavailable
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
      summary: List all birds of a specified set and seach parameters
      tags:
      - Birds
  /api/v1/posts:
    post:
      consumes:
      - application/json
      description: Create a new post
      parameters:
      - description: post
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/models.PostInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.PostDB'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "503":
          description: Service Unavailable
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
      security:
      - Bearer: []
      summary: Create a new post
      tags:
      - Posts
  /api/v1/posts/{id}:
    delete:
      consumes:
      - application/json
      description: Delete given post
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "403":
          description: Forbidden
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "503":
          description: Service Unavailable
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
      security:
      - Bearer: []
      summary: Delete given post
      tags:
      - Posts
    get:
      consumes:
      - application/json
      description: Get post by ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.PostOutput'
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "410":
          description: Gone
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "503":
          description: Service Unavailable
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
      summary: Get post by ID
      tags:
      - Posts
    patch:
      consumes:
      - application/json
      description: Update given post
      parameters:
      - description: post ID
        in: path
        name: id
        required: true
        type: string
      - description: post
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/models.PostInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "403":
          description: Forbidden
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "503":
          description: Service Unavailable
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
      security:
      - Bearer: []
      summary: Update given post
      tags:
      - Posts
  /api/v1/posts/list:
    get:
      consumes:
      - application/json
      description: List all posts of a specified set
      parameters:
      - description: Set of posts
        in: query
        name: set
        type: integer
      - description: Search parameter for post
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.PostOutput'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "503":
          description: Service Unavailable
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
      summary: List all posts of a specified set
      tags:
      - Posts
  /api/v1/users:
    post:
      consumes:
      - application/json
      description: Login a user or create a new user if there is no existing user
      parameters:
      - description: user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserLogin'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.UserDB'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "503":
          description: Service Unavailable
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
      summary: Login a user
      tags:
      - Users
  /api/v1/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete given user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "403":
          description: Forbidden
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "503":
          description: Service Unavailable
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
      security:
      - Bearer: []
      summary: Delete given user
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Get user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.UserOutput'
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "410":
          description: Gone
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "503":
          description: Service Unavailable
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
      summary: Get user by ID
      tags:
      - Users
    patch:
      consumes:
      - application/json
      description: Update given user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "403":
          description: Forbidden
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "503":
          description: Service Unavailable
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
      security:
      - Bearer: []
      summary: Update given user
      tags:
      - Users
  /api/v1/users/{id}/posts/list:
    get:
      consumes:
      - application/json
      description: List all posts of a specified set
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Set of posts
        in: query
        name: set
        type: integer
      - description: Search parameter for post
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.PostOutput'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "503":
          description: Service Unavailable
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
      summary: List all posts of a specified set
      tags:
      - Posts
  /api/v1/users/list:
    get:
      consumes:
      - application/json
      description: List all users of a specified set
      parameters:
      - description: Set of users
        in: query
        name: set
        type: integer
      - description: Search parameter for user
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.UserOutput'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "503":
          description: Service Unavailable
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
      summary: List all users of a specified set
      tags:
      - Users
  /api/v1/users/me:
    get:
      consumes:
      - application/json
      description: Get current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.UserOutput'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "410":
          description: Gone
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
        "503":
          description: Service Unavailable
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Err'
              type: object
      security:
      - Bearer: []
      summary: Get current user
      tags:
      - Users
schemes:
- http
securityDefinitions:
  Bearer:
    description: '>- Enter the token with the `Bearer: ` prefix, e.g. "Bearer eyJhbGciOiJIUzI1NiJ9.e30.DXCaKJxPJq8JhXOZIN4yWdBwJ4sraVbwH9imDCHZPaA".'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
